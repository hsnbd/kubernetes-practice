services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v3
    container_name: traefik
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "8090:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`kube.ecom.local`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"

  postgresql:
    image: docker.io/bitnami/postgresql:17
    ports:
      - '5432:5432'
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
      - './apps/databases/postgresql/init:/docker-entrypoint-initdb.d'
    environment:
      - POSTGRESQL_USERNAME=admin
      - POSTGRESQL_PASSWORD=password
      - POSTGRESQL_DATABASE=postgres
      - POSTGRESQL_POSTGRES_PASSWORD=password
    networks:
      - traefik

  # Frontend (Next.js)
  frontend:
    build: 
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: frontend
    working_dir: /app
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./apps/.next
          target: /app/.next
          ignore:
            - node_modules
    environment:
      - NODE_ENV=production
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`kube.ecom.local`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - traefik
  
  user-service:
    build: 
      context: ./apps/user-service
      dockerfile: Dockerfile
    container_name: user_service_api
    environment:
      - DB_HOST=postgresql
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_NAME=postgres
      - DB_PORT=5432
      - JWT_SECRET=your-super-secret-key-change-this-in-production
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=Host(`kube.ecom.local`) && PathPrefix(`/services/users`)"
      - "traefik.http.routers.user-service.entrypoints=web"
      - "traefik.http.routers.user-service.middlewares=user-service-stripprefix"
      - "traefik.http.middlewares.user-service-stripprefix.stripprefix.prefixes=/services/users"
      - "traefik.http.services.user-service.loadbalancer.server.port=8080"
    depends_on:
      - postgresql
      - traefik

  # Order Service (NestJS)
  order-service:
    build:
      context: ./apps/order-service
      dockerfile: Dockerfile
    container_name: order_service_api
    environment:
      - NODE_ENV=production
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order-service.rule=Host(`kube.ecom.local`) && PathPrefix(`/services/orders`)"
      - "traefik.http.routers.order-service.entrypoints=web"
      - "traefik.http.routers.order-service.middlewares=order-service-stripprefix"
      - "traefik.http.middlewares.order-service-stripprefix.stripprefix.prefixes=/services/orders"
      - "traefik.http.services.order-service.loadbalancer.server.port=3000"
    depends_on:
      - traefik

  # Product Service (Laravel)
  product-service:
    build:
      context: ./apps/product-service
      dockerfile: Dockerfile
    working_dir: /var/www/html
    volumes:
      - ./apps/product-service:/var/www/html
    container_name: product_service_api
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_DATABASE=postgres
      - DB_USERNAME=admin
      - DB_PASSWORD=password
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.product-service.rule=Host(`kube.ecom.local`) && PathPrefix(`/services/products`)"
      - "traefik.http.routers.product-service.entrypoints=web"
      - "traefik.http.routers.product-service.middlewares=strip-products"
      - "traefik.http.middlewares.strip-products.stripPrefix.prefixes=/services/products"
      - "traefik.http.services.product-service.loadbalancer.server.port=80"
    depends_on:
      - postgresql
      - traefik

  # Notification Service
  notification-service:
    build:
      context: ./apps/notification-service
      dockerfile: Dockerfile
    container_name: notification_service_api
    environment:
      - NODE_ENV=production
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-service.rule=Host(`kube.ecom.local`) && PathPrefix(`/services/notifications`)"
      - "traefik.http.routers.notification-service.entrypoints=web"
      - "traefik.http.routers.notification-service.middlewares=notification-service-stripprefix"
      - "traefik.http.middlewares.notification-service-stripprefix.stripprefix.prefixes=/services/notifications"
      - "traefik.http.services.notification-service.loadbalancer.server.port=3000"
    depends_on:
      - traefik

  # Analytics Service (Python/FastAPI)
  analytics-service:
    build:
      context: ./apps/analytics-service
      dockerfile: Dockerfile
    container_name: analytics_service_api
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://admin:password@postgresql:5432/postgres
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analytics-service.rule=Host(`kube.ecom.local`) && PathPrefix(`/services/analytics`)"
      - "traefik.http.routers.analytics-service.entrypoints=web"
      - "traefik.http.routers.analytics-service.middlewares=analytics-service-stripprefix"
      - "traefik.http.middlewares.analytics-service-stripprefix.stripprefix.prefixes=/services/analytics"
      - "traefik.http.services.analytics-service.loadbalancer.server.port=8000"
    depends_on:
      - postgresql
      - traefik

networks:
  traefik:
    driver: bridge

volumes:
  postgresql_data:
    driver: local
  kube_product_service_vendor:
    driver: local
